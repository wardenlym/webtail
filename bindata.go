// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\x95\x14\x2b\x23\x36\x69\x39\x1f\xc0\x2a\xb2\x2e\x69\x81\x1e\x8a\x24\x68\xb6\xc8\x99\x12\xc7\x12\xb3\x14\xc9\x92\x74\x64\xd7\xd0\x7f\x2f\x28\xd9\x5e\x5b\x76\xb6\x11\x20\x40\x9c\x47\xcd\xbc\x79\x33\x43\x66\xb5\x6f\x64\x3e\xc9\x6a\x64\x3c\x9f\x00\x00\x64\x5e\x78\x89\xf9\x57\x2c\x1e\x98\x90\x19\x1d\x96\x03\xe4\x4a\x2b\x8c\x07\x67\xcb\x55\x54\x7b\x6f\x52\x4a\x99\x31\x8e\x14\x5c\x34\x15\x29\x75\x43\xa5\x28\x1c\xfd\xf6\xcf\x06\xed\x8e\x2e\x49\x42\xde\x1c\x16\xa4\x11\x8a\x7c\x73\x51\x9e\xd1\xc1\xc9\xd1\xa3\xdf\x49\x04\xbf\x33\xb8\x8a\x3c\x6e\x3d\x2d\x9d\x8b\x06\x2c\x3c\x85\xe6\x3b\xd8\x9f\x96\xbd\x89\x95\x8f\x95\xd5\x1b\xc5\xe7\xa5\x96\xda\xa6\x50\x48\x56\x3e\xbe\xbf\xd8\x74\x40\xda\x5a\x78\xbc\x44\xd6\x5a\xf9\x14\x92\xd7\x66\x4b\x13\xf2\x06\x1a\xad\x58\xa9\x67\x10\x7d\xd0\x1b\x2b\xd0\xc2\x47\x6c\xa3\x19\x1c\x56\xb3\x80\x6b\x67\x58\x39\xf2\xd2\x30\x5b\x09\x95\xc2\xc2\x6c\x2f\x01\xc3\x38\x17\xaa\x4a\x21\x59\x98\x2d\x2c\x2f\xf0\xee\xf4\x55\x27\xff\x9b\xd4\x8b\xe5\x72\x79\x33\xa7\xca\x22\xaa\x1d\x4a\xa9\xdb\xeb\xcc\xe6\x4e\xfc\x8b\x29\x24\x64\x89\xcd\x0d\xb4\x45\x51\xd5\x3e\x85\x77\x8b\xc5\x88\xb6\x76\xc2\x0b\xad\x52\x58\x8b\x2d\xf2\x4b\xb0\x15\xdc\xd7\x21\xa3\xc5\xaf\x3f\x50\xe1\xd2\xec\xb5\xb9\xb2\x49\x5c\xfb\x2b\xe3\x49\xac\xb7\xcf\x68\xf5\xa2\x41\xe7\x58\x85\x6e\x24\xd9\x31\xf8\xeb\x20\x74\x78\x93\xc3\xc7\x73\x05\xb9\x82\x8f\x6a\xdf\xdf\xdf\x3f\x1f\xdc\x8c\xc2\xf7\xad\x35\xef\x5b\x23\x05\x63\x71\xde\x5a\x66\x46\xba\x69\xcb\x7b\x73\x0a\x85\x45\xf6\x38\x0f\x86\xdb\xe1\x39\x1f\x01\x52\x28\x9c\xd7\x87\x72\xbd\x1d\xb3\x3e\x2f\xf5\xbb\x6b\xd9\x32\xda\x8f\x55\x3e\xc9\xe8\x30\xd7\x59\x98\xa3\x30\xe5\x49\xbe\xdf\x93\x3f\x75\xd5\x75\x19\xad\x93\x7c\x92\x71\xf1\x1d\x04\x5f\x45\xc7\x3c\xc3\x80\x72\xf1\x3d\x9f\x64\xe7\x63\xfa\x32\xe6\xba\xdc\x34\xa8\xfc\x94\x58\x64\x7c\x17\xaf\x37\xaa\x0c\x0d\x03\xf1\xf4\x4c\x18\xb1\x86\xb8\x15\x8a\xeb\x96\x7c\xc5\xe2\x8b\x2e\x1f\xd1\x4f\xc7\xc2\x39\x58\x81\xc2\x16\x4e\x3b\xe2\xa8\x75\x29\xa5\xfb\x3d\xf9\x43\x3b\xdf\x75\x74\xad\x43\x77\x47\xd3\x91\x9c\x8e\x68\x75\xe0\x09\x2b\x78\x62\x80\xe3\x10\x03\xe5\xe8\x54\xbc\x68\x4a\x98\x31\xa8\x78\x1c\x65\x26\x8f\xe0\x15\x20\xe1\xcc\x33\x78\x05\x51\x46\x4d\x3e\x8e\x14\x1e\x4a\xa1\xd4\xca\x69\x89\x44\xea\x2a\x8e\x5a\x2c\x5c\xcf\x36\x85\x27\x07\x37\xfe\x7b\x19\xdf\x85\x23\x75\xd6\x1f\x5d\x77\x53\xc2\x94\x68\x98\xc7\x78\xef\x4a\xab\xa5\x7c\x08\xb3\x71\x2e\xe7\x50\xe3\x78\xda\xcd\x60\x31\x72\xd7\xdd\xc8\xbf\x94\xda\xfd\x44\xf6\x81\x1c\x09\xe7\x69\x7c\xf7\x41\x2b\x85\xc3\xde\xfe\x67\x7e\x77\x83\x75\xbf\x1f\x1b\xe3\x77\xf1\x8f\x49\x74\x80\xd2\xe1\x28\x1a\x93\x68\x7d\x1c\x9d\x8a\x09\x1f\x3f\x3d\xc0\x97\xbf\x3f\x7f\xfe\xf4\xd7\xc3\xef\xbf\xfd\x72\x2e\xed\xd0\x9c\xdd\xf4\xfd\xe4\xe9\x12\xc8\xe8\xa1\x35\x69\x7f\x11\xfd\x17\x00\x00\xff\xff\x5c\x78\x77\x1a\x8f\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1679, mode: os.FileMode(438), modTime: time.Unix(1520424451, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

