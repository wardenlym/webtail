// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x5f\x6f\xdb\x36\x10\x7f\xf7\xa7\xb8\xa9\x1d\x22\xb7\x36\x69\x39\xe9\xba\x28\xb2\x5e\xb2\x01\x7b\x18\xda\x62\xcd\xd0\x67\x5a\x3c\x4b\x6c\x28\x92\x23\xe9\xca\x9e\xa1\xef\x3e\x50\x72\x1c\x5b\x76\xb3\x0a\x20\x20\xde\x9d\xee\x7e\xf7\xbb\x3f\xca\x2a\x5f\xcb\x7c\x94\x55\xc8\x78\x3e\x02\x00\xc8\xbc\xf0\x12\xf3\x2f\xb8\x7c\x60\x42\x66\xb4\xbf\xf6\x2a\x57\x58\x61\x3c\x38\x5b\x2c\xa2\xca\x7b\x93\x52\xca\x8c\x71\x64\xc9\x45\x5d\x92\x42\xd7\x54\x8a\xa5\xa3\x5f\xff\x59\xa3\xdd\xd2\x39\x49\xc8\xcd\xfe\x42\x6a\xa1\xc8\x57\x17\xe5\x19\xed\x9d\x3c\x79\xf4\x5b\x89\xe0\xb7\x06\x17\x91\xc7\x8d\xa7\x85\x73\x51\xaf\x0b\xcf\x52\xf3\x2d\xec\x0e\xd7\x4e\xc4\x8a\xc7\xd2\xea\xb5\xe2\xd3\x42\x4b\x6d\x53\xb0\xe5\x32\xbe\x7e\x3f\x81\xee\xfc\x3a\xbe\x3b\x31\xdf\xdb\x34\x95\xf0\x78\xaa\x59\x69\xe5\x53\x48\xae\xcd\x86\x26\xe4\x06\x6a\xad\x58\xa1\x27\x10\xdd\xeb\xb5\x15\x68\xe1\x03\x36\xd1\x04\xee\xb5\x72\x5a\x32\x37\x09\x06\xda\x19\x56\x0c\xdc\xd4\xcc\x96\x42\xa5\x30\x33\x9b\x53\x85\x61\x9c\x0b\x55\xa6\x90\xcc\xcc\x06\xe6\x27\xfa\xf6\xf0\x56\x25\xff\x9b\xdf\xab\xf9\x7c\x7e\x31\xa9\xd2\x22\xaa\x2d\x4a\xa9\x9b\xf3\xd4\xa6\x4e\xfc\x8b\x29\x24\x64\x8e\xf5\x05\x6d\x83\xa2\xac\x7c\x0a\xbf\xcc\x66\x03\xd8\xda\x09\x2f\xb4\x4a\x61\x25\x36\xc8\x4f\x95\x8d\xe0\xbe\x0a\x19\xcd\x7e\xfe\x0e\x0b\xa7\x62\xaf\xcd\x99\x4c\xe2\xca\x9f\x09\x0f\x64\xbd\x7b\x81\xab\x57\x35\x3a\xc7\x4a\x74\x03\xca\x9e\x82\x5f\x07\xa2\xc3\x49\xf6\x2f\x2f\x15\xe4\x4c\xfd\xc4\xf6\xed\xed\xed\xcb\xc1\xcd\x20\x7c\xd7\x5b\xd3\xae\x35\x52\x30\x16\xa7\x8d\x65\x66\xc0\x9b\xb6\xbc\x13\xa7\xb0\xb4\xc8\x1e\xa7\x41\x70\x6a\x42\xdf\x1c\x10\x70\xce\xef\xe0\x0d\xbd\x84\x2e\xf4\xfa\x7c\x76\x33\xd9\x9f\x41\xb3\x4b\xa1\x70\x5a\xed\x2b\xfb\x6e\x98\xe0\x71\x57\xbc\x3f\x67\x38\xa3\xdd\x30\xe6\xa3\x8c\xf6\xdb\x20\x0b\xd3\x17\x76\x43\x92\xef\x76\xe4\x4f\x5d\xb6\x6d\x46\xab\x24\x1f\x65\x5c\x7c\x03\xc1\x17\xd1\x13\x25\x61\xac\xb9\xf8\x96\x8f\xb2\xe3\xe1\x7e\x1d\x73\x5d\xac\x6b\x54\x7e\x4c\x2c\x32\xbe\x8d\x57\x6b\x55\x84\xde\x82\x78\x7c\xc4\xa1\x58\x41\xdc\x08\xc5\x75\x43\xbe\xe0\xf2\xb3\x2e\x1e\xd1\x8f\x87\x1c\x3b\x58\x80\xc2\x06\x0e\x16\x71\xd4\xb8\x94\xd2\xdd\x8e\xfc\xa1\x9d\x6f\x5b\xba\xd2\x61\x10\xa2\x01\x25\x8d\x23\x5a\xed\x71\xc2\x02\x9e\x11\xe0\x30\x44\x0f\x39\x3a\xd4\x39\x1a\x13\x66\x0c\x2a\x1e\x47\x99\xc9\x23\x78\x0b\x48\x38\xf3\x0c\xde\x42\x94\x51\x93\x0f\x23\x75\x45\xa4\x50\x74\x0b\x03\x89\xd4\x65\x1c\x35\xb8\x74\x1d\xda\x14\x9e\x1d\x5c\xf8\xee\x75\x7c\x15\x16\xf1\xa4\x5b\x78\x57\x63\xc2\x94\xa8\x99\xc7\x78\xe7\x0a\xab\xa5\x7c\x08\x63\x74\x4c\x67\x5f\xe3\x78\xdc\x4e\x60\x36\x70\xd7\x5e\xc8\xbf\x90\xda\xfd\x40\xf6\x01\x1c\x09\x5b\x38\xbe\xba\xd7\x4a\x61\x6f\xdb\x7d\xcc\xaf\x2e\xa0\xee\xec\xb1\x36\x7e\x1b\x7f\x1f\x44\x0b\x28\x1d\x0e\xa2\x31\x89\xd6\xc7\xd1\xa1\x98\xf0\xe1\xe3\x03\x7c\xfe\xfb\xd3\xa7\x8f\x7f\x3d\xfc\xfe\xdb\x4f\xc7\xd4\xf6\xcd\xd9\x8e\xef\x46\xcf\xbf\x8e\x8c\xee\x5b\x93\x76\xbf\xaf\xff\x02\x00\x00\xff\xff\xec\x84\xce\x83\xc5\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1733, mode: os.FileMode(438), modTime: time.Unix(1520428320, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

