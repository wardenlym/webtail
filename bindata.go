// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\xa6\x4a\x8a\x95\x11\x9b\xb4\xb4\x3f\xed\x2a\xb2\x2e\xdb\x02\x3d\x14\x49\xd0\x6c\x91\x33\x25\x8e\x25\x66\x29\x92\x25\xe9\xc8\xae\xa1\x77\x2f\x24\x79\xbd\xb6\xec\x6c\x23\x40\x80\x38\x33\x9a\xf9\xe6\x9b\x1f\xa6\x95\xaf\x65\x36\x49\x2b\x64\x3c\x9b\x00\x00\xa4\x5e\x78\x89\xd9\x17\xcc\x1f\x99\x90\x29\x1d\x8e\x83\xca\x15\x56\x18\x0f\xce\x16\xcb\xa0\xf2\xde\x24\x94\x32\x63\x1c\xc9\xb9\xa8\x4b\x52\xe8\x9a\x4a\x91\x3b\xfa\xf5\x9f\x35\xda\x2d\x8d\x49\x44\x6e\xf6\x07\x52\x0b\x45\xbe\xba\x20\x4b\xe9\xe0\xe4\xd9\xa3\xdf\x4a\x04\xbf\x35\xb8\x0c\x3c\x6e\x3c\x2d\x9c\x0b\x06\x5d\xf7\xe4\x9a\x6f\x61\x77\x38\xf6\x22\x56\x3c\x95\x56\xaf\x15\x9f\x17\x5a\x6a\x9b\x80\x2d\xf3\xf0\xfa\x97\x19\xf4\xef\xaf\xd3\xf7\x27\xe6\x47\x36\xd1\xed\xdd\x0c\xe2\x78\x31\x83\xf8\xf6\x66\x64\xb6\xd2\xca\x27\x10\x5d\x9b\x0d\x8d\xc8\x0d\xd4\x5a\xb1\x42\xcf\x20\x78\xd0\x6b\x2b\xd0\xc2\x07\x6c\x82\x19\x3c\x68\xe5\xb4\x64\x6e\xd6\x19\x68\x67\x58\x81\xa7\x6e\x6a\x66\x4b\xa1\x12\x58\x98\xcd\xa9\xc2\x30\xce\x85\x2a\x13\x88\x16\x66\x03\xf1\x89\xbe\x3d\x7c\x55\xd1\xff\x26\xfb\x26\x8e\xe3\x8b\x19\x96\x16\x51\x6d\x51\x4a\xdd\x9c\xa7\x36\x77\xe2\x5f\x4c\x20\x22\x31\xd6\x17\xb4\x0d\x8a\xb2\xf2\x09\xdc\x2d\x16\x23\xd8\xda\x09\x2f\xb4\x4a\x60\x25\x36\xc8\x4f\x95\x8d\xe0\xbe\xea\x32\x5a\xfc\xfc\x1d\x16\x4e\xc5\x5e\x9b\x33\x99\xc4\x95\x3f\x13\x1e\xc8\xba\x7d\x85\xab\x37\x35\x3a\xc7\x4a\x74\x23\xca\x9e\x83\x5f\x77\x44\x77\x6f\xb4\xff\x78\xad\x20\x67\xea\x67\xb6\xef\xef\xef\x5f\x0f\x6e\x46\xe1\x9b\x4a\x78\x9c\xf7\xad\x91\x80\xb1\x38\x6f\x2c\x33\x23\xde\xb4\xe5\xbd\x38\x81\xdc\x22\x7b\x9a\x77\x82\xcb\xe1\x39\x1f\x29\xa4\x50\x38\xaf\xf6\xe5\xba\x1d\xa3\x3e\x2e\xf5\xdd\x39\x6d\x29\xed\xc7\x2d\x9b\xa4\x74\x98\xf7\xb4\x9b\xaf\x6e\xfa\xa3\x6c\xb7\x23\x7f\xea\xb2\x6d\x53\x5a\x45\xd9\x24\xe5\xe2\x1b\x08\xbe\x0c\x9e\xf3\xec\x06\x97\x8b\x6f\xd9\x24\x3d\x1e\xdf\xb7\x21\xd7\xc5\xba\x46\xe5\xa7\xc4\x22\xe3\xdb\x70\xb5\x56\x45\xd7\x30\x10\x4e\x8f\x88\x11\x2b\x08\x1b\xa1\xb8\x6e\xc8\x17\xcc\x3f\xeb\xe2\x09\xfd\x74\x4c\x9c\x83\x25\x28\x6c\xe0\x60\x11\x06\x8d\x4b\x28\xdd\xed\xc8\x1f\xda\xf9\xb6\xa5\x2b\xdd\x75\x77\x30\x1a\xdd\xc6\x11\xad\xf6\x38\x61\x09\x2f\x08\x70\x1c\x62\x80\x1c\x1c\x8a\x17\x4c\x09\x33\x06\x15\x0f\x83\xd4\x64\x01\xbc\x03\x24\x9c\x79\x06\xef\x20\x48\xa9\xc9\xc6\x91\xba\x87\x52\x28\xfa\x2d\x80\x44\xea\x32\x0c\x1a\xcc\x5d\x8f\x36\x81\x17\x07\x17\xfe\x7b\x1b\x5e\x75\xab\x76\xd6\xaf\xb4\xab\x29\x61\x4a\xd4\xcc\x63\xb8\x73\x85\xd5\x52\x3e\x76\xb3\x71\x4c\xe7\x50\xe3\x70\xda\xce\x60\x31\x72\xd7\x5e\xc8\xbf\x90\xda\xfd\x40\xf6\x1d\x38\xd2\xed\xd9\xf0\xea\x41\x2b\x85\x83\x6d\xff\x33\xbf\xba\x80\xba\xb7\xc7\xda\xf8\x6d\xf8\x7d\x10\x2d\xa0\x74\x38\x8a\xc6\x24\x5a\x1f\x06\x87\x62\xc2\x87\x8f\x8f\xf0\xf9\xef\x4f\x9f\x3e\xfe\xf5\xf8\xfb\x6f\x3f\x1d\x53\x3b\x34\x67\x3b\x7d\x3f\x79\xb9\x1c\x52\xba\x6f\x4d\xda\x5f\x50\xff\x05\x00\x00\xff\xff\xa7\x91\x3a\x40\xa7\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1703, mode: os.FileMode(438), modTime: time.Unix(1520427470, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

