// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xdf\x6f\xdb\x36\x10\x7e\xf7\x5f\x71\x63\x3b\x44\x42\x6d\xd2\x72\xd3\x01\x51\x65\xbd\x6c\x03\xf6\x30\xb4\xc5\x9a\xa1\xcf\x94\x78\x96\xd8\x50\x24\x47\xd2\x91\x3d\x43\xff\xfb\x20\xc9\x71\x6c\x39\x4b\x0d\x18\xd0\xdd\x27\xde\x8f\xef\xee\xa3\xb2\x3a\x34\x2a\x9f\x65\x35\x72\x91\xcf\x00\x00\xb2\x20\x83\xc2\xfc\x1b\x16\xf7\x5c\xaa\x8c\x8d\xe6\x08\xf9\xd2\x49\x1b\xc0\xbb\x72\x4d\xea\x10\x6c\xca\x18\xb7\xd6\xd3\x42\xc8\xa6\xa2\xa5\x69\x98\x92\x85\x67\xdf\xff\xd9\xa2\xdb\xb3\x15\x4d\xe8\xed\xd1\xa0\x8d\xd4\xf4\xbb\x27\x79\xc6\xc6\x20\x4f\x11\xc3\x5e\x21\x84\xbd\xc5\x35\x09\xb8\x0b\xac\xf4\x9e\x8c\x58\xff\x2b\x8c\xd8\xc3\xe1\x64\x0e\x2e\x5e\x3e\x54\xce\x6c\xb5\x58\x94\x46\x19\x97\x42\xa1\x78\xf9\xf0\xf1\xe2\xa5\x23\xd2\xd6\x32\xe0\x25\xb2\x31\x3a\xa4\x90\xbc\xb7\x3b\x96\xd0\x5b\x68\x8c\xe6\xa5\x99\x03\xf9\xd5\x6c\x9d\x44\x07\x9f\xb0\x25\x73\x38\x5a\xf3\x1e\x37\xde\xf2\x72\x12\xa5\xe1\xae\x92\x3a\x85\xa5\xdd\x5d\x02\x96\x0b\x21\x75\x95\x42\xb2\xb4\x3b\x58\x5d\xe0\xdd\xe9\xa9\x4e\x7e\xd8\xd4\x9b\xd5\x6a\xf5\x62\x4f\x95\x43\xd4\x7b\x54\xca\xb4\xd7\x9d\x2d\xbc\xfc\x17\x53\x48\xe8\x0a\x9b\x17\xd0\x16\x65\x55\x87\x14\x7e\x59\x2e\x27\x65\x1b\x2f\x83\x34\x3a\x85\x8d\xdc\xa1\xb8\x04\x5b\x29\x42\xdd\x77\xb4\xfc\xf9\x7f\x58\xb8\x74\x07\x63\xaf\x7c\x0a\x37\xe1\xca\x79\x22\xeb\xc3\x2b\x5c\xbd\x69\xd0\x7b\x5e\xa1\x9f\x50\xf6\x94\xfc\x7d\x4f\x74\xff\x4f\x8e\x0f\xaf\x0d\xe4\x0a\x7e\x62\xfb\xee\xee\xee\xf5\xe4\x76\x92\x7e\x58\xad\xc5\xb0\x1a\x29\x58\x87\x8b\xd6\x71\x3b\xe1\xcd\x38\x31\xb8\x53\x28\x1c\xf2\x87\x45\xef\x78\x39\xbd\x10\x13\x40\x49\x8d\x8b\xfa\x38\xae\xe4\xc3\x94\xf9\xf3\x59\xdf\x5e\xf3\x96\xb1\x41\x57\xf9\x2c\x63\xa3\xb0\xb3\x5e\x48\xbd\xcc\x93\xfc\x70\xa0\x7f\x9a\xaa\xeb\x32\x56\x27\xf9\x2c\x13\xf2\x11\xa4\x58\x93\xa7\x46\x7b\x85\x0a\xf9\x98\xcf\xb2\x73\x9d\xbe\x8d\x84\x29\xb7\x0d\xea\x10\x53\x87\x5c\xec\xa3\xcd\x56\x97\xfd\xc6\x40\x14\x9f\x31\x23\x37\x10\xb5\x52\x0b\xd3\xd2\x6f\x58\x7c\x35\xe5\x03\x86\x78\xca\x9c\x87\x35\x68\x6c\xe1\xf4\x46\x44\x5a\x9f\x32\x76\x38\xd0\x3f\x8c\x0f\x5d\xc7\x36\xa6\x5f\x6f\x12\x4f\xf8\xf4\xd4\xe8\x63\x9d\xb0\x86\xe7\x0a\x70\x9a\x62\x2c\x99\x9c\xa6\x47\x62\xca\xad\x45\x2d\x22\x92\xd9\x9c\xc0\x3b\x40\x2a\x78\xe0\xf0\x0e\x48\xc6\x6c\x3e\xcd\x34\x8e\x46\x7b\xa3\x90\x2a\x53\x45\xa4\xc5\xc2\x0f\xa5\xa6\xf0\x7c\xfa\x85\x43\x6f\xa3\x9b\xfe\x42\x9d\x0f\x17\xd7\x4d\x4c\xb9\x96\x0d\x0f\x18\x1d\x7c\xe9\x8c\x52\xf7\xbd\x32\xce\xb9\x1c\x27\x1c\xc5\xdd\x1c\x6e\x36\xdc\x87\x9b\x49\xcc\xee\x6c\xb2\x80\xca\xe3\xa4\x51\xae\xd0\x85\x88\x9c\x98\x84\x4f\x9f\xef\xe1\xeb\xdf\x5f\xbe\x7c\xfe\xeb\xfe\xf7\xdf\x7e\x3a\xef\x6b\xdc\x8c\x2e\xfe\x38\x7b\xbe\x82\x33\x76\xdc\x0b\x36\x7c\x06\xfe\x0b\x00\x00\xff\xff\x65\xd5\x84\x33\x0d\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1549, mode: os.FileMode(438), modTime: time.Unix(1520407370, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

