// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\x99\x14\x2b\x21\x36\x69\x39\x1f\xc0\x2a\xb2\x2e\x6d\x81\x1e\x8a\x24\x68\xb6\xc8\x99\x12\xc7\x12\xb3\x14\xc9\x92\x74\x64\xd7\xd0\x7f\x2f\x24\x79\xbd\xb6\xec\x6e\x0d\x18\xd0\xcc\x13\xe7\xe3\xcd\x3c\x2a\xab\x43\xa3\xf2\x59\x56\x23\x17\xf9\x0c\x00\x20\x0b\x32\x28\xcc\xbf\x61\xf1\xc0\xa5\xca\xd8\x68\x8e\x90\x2f\x9d\xb4\x01\xbc\x2b\xd7\xa4\x0e\xc1\xa6\x8c\x71\x6b\x3d\x2d\x84\x6c\x2a\x5a\x9a\x86\x29\x59\x78\xf6\xfd\xef\x2d\xba\x3d\x5b\xd1\x84\xbe\x3b\x1a\xb4\x91\x9a\x7e\xf7\x24\xcf\xd8\x18\xe4\x29\x62\xd8\x2b\x84\xb0\xb7\xb8\x26\x01\x77\x81\x95\xde\x93\x11\xeb\x7f\x85\x11\x7b\x38\x9c\xcc\xc1\xc5\xcb\xc7\xca\x99\xad\x16\x8b\xd2\x28\xe3\x52\x28\x14\x2f\x1f\x3f\x5e\xbc\x74\x44\xda\x5a\x06\xbc\x44\x36\x46\x87\x14\x92\xb7\x76\xc7\x12\xfa\x0e\x1a\xa3\x79\x69\xe6\x40\x7e\x31\x5b\x27\xd1\xc1\x27\x6c\xc9\x1c\x8e\xd6\xbc\xc7\x8d\xb7\xbc\x9c\x44\x69\xb8\xab\xa4\x4e\x61\x69\x77\x97\x80\xe5\x42\x48\x5d\xa5\x90\x2c\xed\x0e\x56\x17\x78\x77\x7a\xaa\x93\xff\x6d\xea\xd5\x6a\xb5\xba\xd9\x53\xe5\x10\xf5\x1e\x95\x32\xed\x75\x67\x0b\x2f\xff\xc1\x14\x12\xba\xc2\xe6\x06\xda\xa2\xac\xea\x90\xc2\x87\xe5\x72\x52\xb6\xf1\x32\x48\xa3\x53\xd8\xc8\x1d\x8a\x4b\xb0\x95\x22\xd4\x7d\x47\xcb\x9f\xff\x83\x85\x4b\x77\x30\xf6\xca\xa7\x70\x13\xae\x9c\x27\xb2\xde\xbf\xc0\xd5\xab\x06\xbd\xe7\x15\xfa\x09\x65\x4f\xc9\xdf\xf6\x44\xf7\xff\xe4\xf8\xf0\xd2\x40\xae\xe0\x27\xb6\xef\xef\xef\x5f\x4e\x6e\x27\xe9\x87\xd5\x5a\x0c\xab\x91\x82\x75\xb8\x68\x1d\xb7\x13\xde\x8c\x13\x83\x3b\x85\xc2\x21\x7f\x5c\xf4\x8e\xdb\xe9\x85\x98\x00\x4a\x6a\x5c\xd4\xc7\x71\xbd\x9f\x56\x7d\x3e\xea\x0f\xd7\xb4\x65\x6c\x90\x55\x3e\xcb\xd8\xa8\xeb\xac\xd7\x51\xaf\xf2\x24\x3f\x1c\xe8\x1f\xa6\xea\xba\x8c\xd5\x49\x3e\xcb\x84\xfc\x01\x52\xac\xc9\x53\x9f\xbd\x40\x85\xfc\x91\xcf\xb2\x73\x99\xbe\x8e\x84\x29\xb7\x0d\xea\x10\x53\x87\x5c\xec\xa3\xcd\x56\x97\xfd\xc2\x40\x14\x9f\x11\x23\x37\x10\xb5\x52\x0b\xd3\xd2\x6f\x58\x7c\x35\xe5\x23\x86\x78\x4a\x9c\x87\x35\x68\x6c\xe1\xf4\x46\x44\x5a\x9f\x32\x76\x38\xd0\xdf\x8d\x0f\x5d\xc7\x36\xa6\xdf\x6e\x12\x4f\xe8\xf4\xd4\xe8\x63\x9d\xb0\x86\xe7\x0a\x70\x9a\x62\x2c\x99\x9c\x86\x47\x62\xca\xad\x45\x2d\x22\x92\xd9\x9c\xc0\x1b\x40\x2a\x78\xe0\xf0\x06\x48\xc6\x6c\x3e\xcd\x34\x4e\x46\x7b\xa3\x90\x2a\x53\x45\xa4\xc5\xc2\x0f\xa5\xa6\xf0\x7c\xfa\xc6\xa1\xd7\xd1\x5d\x7f\x9f\xce\x87\x7b\xeb\x2e\xa6\x5c\xcb\x86\x07\x8c\x0e\xbe\x74\x46\xa9\x87\x5e\x18\xe7\x5c\x8e\x03\x8e\xe2\x6e\x0e\x77\x1b\xee\xc3\xdd\x24\x66\x77\x36\x59\x40\xe5\x71\xd2\x28\x57\xe8\x42\x44\x4e\x4c\xc2\xa7\xcf\x0f\xf0\xf5\xaf\x2f\x5f\x3e\xff\xf9\xf0\xdb\xaf\x3f\x9d\xf7\x35\x6e\x46\x17\x7f\x9c\x3d\xdf\xc0\x19\x3b\xee\x05\x1b\xbe\x02\xff\x06\x00\x00\xff\xff\x1f\x22\xf3\x57\x0c\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1548, mode: os.FileMode(438), modTime: time.Unix(1520413173, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

