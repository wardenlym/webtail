// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\xa6\x4a\x8a\x95\x13\x9b\xb4\xb4\x3f\xed\x6a\x65\x5d\xb6\x05\x7a\x28\x92\xa0\xd9\x22\x67\x5a\x1c\x4b\xcc\x52\x24\x4b\xd2\x91\x5d\x43\xef\x5e\x48\xb2\xbd\xb6\xec\x6c\x23\x40\x80\x38\x33\x9a\xf9\xe6\x9b\x1f\xa6\xa5\xaf\x64\x36\x4a\x4b\x64\x3c\x1b\x01\x00\xa4\x5e\x78\x89\xd9\x17\x5c\x3c\x31\x21\x53\xda\x1f\x7b\x95\xcb\xad\x30\x1e\x9c\xcd\xe7\x41\xe9\xbd\x49\x28\x65\xc6\x38\xb2\xe0\xa2\x2a\x48\xae\x2b\x2a\xc5\xc2\xd1\xaf\xff\xac\xd0\x6e\x68\x4c\x22\x72\xb3\x3b\x90\x4a\x28\xf2\xd5\x05\x59\x4a\x7b\x27\x7b\x8f\x7e\x23\x11\xfc\xc6\xe0\x3c\xf0\xb8\xf6\x34\x77\x2e\xe8\x75\xed\xb3\xd0\x7c\x03\xdb\xc3\xb1\x13\xb1\xfc\xb9\xb0\x7a\xa5\xf8\x34\xd7\x52\xdb\x04\x6c\xb1\x08\xaf\x7f\x99\x40\xf7\xfe\x3a\x7e\x38\x31\xdf\xd9\xd4\xa5\xf0\x78\xaa\x59\x6a\xe5\x13\x88\xae\xcd\x9a\x46\xe4\x06\x2a\xad\x58\xae\x27\x10\x3c\xea\x95\x15\x68\xe1\x03\xd6\xc1\x04\x1e\xb5\x72\x5a\x32\x37\x69\x0d\xb4\x33\x2c\x1f\xb8\xa9\x98\x2d\x84\x4a\x60\x66\xd6\xa7\x0a\xc3\x38\x17\xaa\x48\x20\x9a\x99\x35\xc4\x27\xfa\xe6\xf0\x55\x46\xff\x9b\xdf\x9b\x38\x8e\x2f\x26\x55\x58\x44\xb5\x41\x29\x75\x7d\x9e\xda\xd4\x89\x7f\x31\x81\x88\xc4\x58\x5d\xd0\xd6\x28\x8a\xd2\x27\x70\x37\x9b\x0d\x60\x6b\x27\xbc\xd0\x2a\x81\xa5\x58\x23\x3f\x55\xd6\x82\xfb\xb2\xcd\x68\xf6\xf3\x77\x58\x38\x15\x7b\x6d\xce\x64\x12\x97\xfe\x4c\x78\x20\xeb\xf6\x15\xae\xde\x54\xe8\x1c\x2b\xd0\x0d\x28\xdb\x07\xbf\x6e\x89\x6e\xdf\x68\xf7\xf1\x5a\x41\xce\xd4\x7b\xb6\xef\xef\xef\x5f\x0f\x6e\x06\xe1\xbb\xde\x9a\x76\xad\x91\x80\xb1\x38\xad\x2d\x33\x03\xde\xb4\xe5\x9d\x38\x81\x85\x45\xf6\x3c\x6d\x05\xa7\x26\xf4\xdd\x01\x01\xe7\xfc\x01\xde\xd1\x4b\xe8\xda\x5e\x8f\x6e\xef\x26\x10\xc7\xb3\x09\xc4\xb7\x37\x83\x76\x97\x42\xe1\xb4\xdc\xd5\xf6\x76\x98\xe2\x71\x5f\xdc\x9d\x73\x9c\xd2\x6e\x1c\xb3\x51\x4a\xfb\x7d\x90\xb6\xf3\xd7\x6e\x87\x28\xdb\x6e\xc9\x9f\xba\x68\x9a\x94\x96\x51\x36\x4a\xb9\xf8\x06\x82\xcf\x83\x3d\x29\xed\x60\x73\xf1\x2d\x1b\xa5\xc7\xe3\xfd\x36\xe4\x3a\x5f\x55\xa8\xfc\x98\x58\x64\x7c\x13\x2e\x57\x2a\x6f\xbb\x0b\xc2\xf1\x11\x8b\x62\x09\x61\x2d\x14\xd7\x35\xf9\x82\x8b\xcf\x3a\x7f\x46\x3f\x1e\xb2\xec\x60\x0e\x0a\x6b\x38\x58\x84\x41\xed\x12\x4a\xb7\x5b\xf2\x87\x76\xbe\x69\xe8\x52\xb7\xa3\x10\x0c\x28\xa9\x1d\xd1\x6a\x87\x13\xe6\xf0\x82\x00\x87\x21\x7a\xc8\xc1\xa1\xd2\xc1\x98\x30\x63\x50\xf1\x30\x48\x4d\x16\xc0\x7b\x40\xc2\x99\x67\xf0\x1e\x82\x94\x9a\x6c\x18\xa9\x2b\x23\x85\xbc\x5b\x19\x48\xa4\x2e\xc2\xa0\xc6\x85\xeb\xd0\x26\xf0\xe2\xe0\xc2\x7f\x6f\xc3\xab\x76\x15\x4f\xba\x95\x77\x35\x26\x4c\x89\x8a\x79\x0c\xb7\x2e\xb7\x5a\xca\xa7\x76\x90\x8e\xe9\xec\x6b\x1c\x8e\x9b\x09\xcc\x06\xee\x9a\x0b\xf9\xe7\x52\xbb\x1f\xc8\xbe\x05\x47\xda\x3d\x1c\x5e\x3d\x6a\xa5\xb0\xb7\xed\x7e\xe6\x57\x17\x50\x77\xf6\x58\x19\xbf\x09\xbf\x0f\xa2\x01\x94\x0e\x07\xd1\x98\x44\xeb\xc3\xe0\x50\x4c\xf8\xf0\xf1\x09\x3e\xff\xfd\xe9\xd3\xc7\xbf\x9e\x7e\xff\xed\xa7\x63\x6a\xfb\xe6\x6c\xc6\x0f\xa3\x97\xcb\x23\xa5\xbb\xd6\xa4\xdd\x05\xf6\x5f\x00\x00\x00\xff\xff\xb9\xb8\x69\x3a\xc7\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1735, mode: os.FileMode(438), modTime: time.Unix(1520427612, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

