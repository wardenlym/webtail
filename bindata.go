// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x8f\xdb\x36\x10\xbd\xfb\x57\x4c\x99\x14\x96\x11\x9b\xb4\x9c\x0f\x60\x15\x59\x97\xb4\x40\x0f\x45\x12\x34\x5b\xe4\x4c\x89\x63\x89\x59\x8a\x64\x49\x3a\xb2\x6b\xe8\xbf\x17\x92\xbc\x5e\x5b\x76\xb6\x31\x60\x40\x9c\x47\xce\xbc\x79\x33\x43\xa6\x55\xa8\x55\x36\x49\x2b\xe4\x22\x9b\x00\x00\xa4\x41\x06\x85\xd9\x57\xcc\xef\xb9\x54\x29\x1b\x96\x03\xe4\x0b\x27\x6d\x00\xef\x8a\x35\xa9\x42\xb0\x09\x63\xdc\x5a\x4f\x73\x21\xeb\x92\x16\xa6\x66\x4a\xe6\x9e\x7d\xfb\x67\x8b\x6e\xcf\x56\x34\xa6\x6f\x8e\x0b\x5a\x4b\x4d\xbf\x79\x92\xa5\x6c\x70\xf2\xe8\x31\xec\x15\x42\xd8\x5b\x5c\x93\x80\xbb\xc0\x0a\xef\xc9\x80\x75\xbf\xdc\x88\x3d\x1c\x4e\xcb\xde\xc4\x8b\x87\xd2\x99\xad\x16\x8b\xc2\x28\xe3\x12\xc8\x15\x2f\x1e\xde\x5f\x6c\x3a\x22\x4d\x25\x03\x5e\x22\x1b\xa3\x43\x02\xf1\x6b\xbb\x63\x31\x7d\x03\xb5\xd1\xbc\x30\x73\x20\x1f\xcc\xd6\x49\x74\xf0\x11\x1b\x32\x87\xe3\x6a\xde\xe1\xc6\x5b\x5e\x8c\xbc\xd4\xdc\x95\x52\x27\xb0\xb4\xbb\x4b\xc0\x72\x21\xa4\x2e\x13\x88\x97\x76\x07\xab\x0b\xbc\x3d\x7d\x55\xf1\xff\x26\xf5\x62\xb5\x5a\xdd\xcc\xa9\x74\x88\x7a\x8f\x4a\x99\xe6\x3a\xb3\x85\x97\xff\x62\x02\x31\x5d\x61\x7d\x03\x6d\x50\x96\x55\x48\xe0\xdd\x72\x39\xa2\x6d\xbc\x0c\xd2\xe8\x04\x36\x72\x87\xe2\x12\x6c\xa4\x08\x55\x97\xd1\xf2\xd7\x1f\xa8\x70\x69\x0e\xc6\x5e\xd9\x14\x6e\xc2\x95\xf1\x24\xd6\xdb\x67\xb4\x7a\x51\xa3\xf7\xbc\x44\x3f\x92\xec\x31\xf8\xeb\x4e\xe8\xee\x1f\x1f\x3f\x9e\x2b\xc8\x15\xfc\xa8\xf6\xdd\xdd\xdd\xf3\xc1\xed\x28\x7c\xdf\x5a\x8b\xbe\x35\x12\xb0\x0e\x17\x8d\xe3\x76\xa4\x9b\x71\xa2\x37\x27\x90\x3b\xe4\x0f\x8b\xce\x70\x3b\xbc\x10\x23\x40\x49\x8d\x8b\xea\x58\xae\xb7\x63\xd6\xe7\xa5\x7e\x77\x2d\x5b\xca\xfa\xb1\xca\x26\x29\x1b\xe6\x3a\xed\xe6\xa8\x9b\xf2\x38\x3b\x1c\xe8\x9f\xa6\x6c\xdb\x94\x55\x71\x36\x49\x85\xfc\x0e\x52\xac\xc9\x63\x9e\xdd\x80\x0a\xf9\x3d\x9b\xa4\xe7\x63\xfa\x32\x12\xa6\xd8\xd6\xa8\xc3\x8c\x3a\xe4\x62\x1f\x6d\xb6\xba\xe8\x1a\x06\xa2\xd9\x99\x30\x72\x03\x51\x23\xb5\x30\x0d\xfd\x8a\xf9\x17\x53\x3c\x60\x98\x8d\x85\xf3\xb0\x06\x8d\x0d\x9c\x76\x44\xa4\xf1\x09\x63\x87\x03\xfd\xc3\xf8\xd0\xb6\x6c\x63\xba\xee\x26\xb3\x91\x9c\x9e\x1a\x7d\xe4\x09\x6b\x78\x62\x80\xe3\x10\x03\x65\x72\x2a\x1e\x99\x51\x6e\x2d\x6a\x11\x91\xd4\x66\x04\x5e\x01\x52\xc1\x03\x87\x57\x40\x52\x66\xb3\x71\xa4\xa1\x32\xda\x1b\x85\x54\x99\x32\x22\x0d\xe6\xbe\xa7\x9a\xc0\xd3\xe9\x1b\x87\x5e\x46\xd3\xee\x3e\x9d\xf7\xf7\xd6\x74\x46\xb9\x96\x35\x0f\x18\x1d\x7c\xe1\x8c\x52\xf7\xdd\x60\x9c\x6b\x39\x14\x38\x9a\xb5\x73\x98\x6e\xb8\x0f\xd3\x91\xcf\xf6\x86\x02\x85\x32\xfe\x27\xf2\xef\x18\xd2\xee\x46\x8d\xa6\x1f\x8c\xd6\x38\xec\xed\x0f\x8b\x71\x98\xd3\x7e\xac\x6d\xd8\x47\x3f\x26\xd1\x02\x2a\x8f\xa3\x68\x5c\xa1\x0b\x11\x39\x95\x13\x3e\x7e\xba\x87\x2f\x7f\x7f\xfe\xfc\xe9\xaf\xfb\xdf\x7f\xfb\xe5\x5c\xdc\xa1\x3d\xdb\xd9\xfb\xc9\xd3\x33\x90\xb2\x63\x73\xb2\xfe\x29\xfa\x2f\x00\x00\xff\xff\xd1\xf1\x1d\x41\x91\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1681, mode: os.FileMode(438), modTime: time.Unix(1520422523, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

