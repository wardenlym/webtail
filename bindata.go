// Code generated by go-bindata.
// sources:
// data/index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x55\xcd\x8e\xdb\x36\x10\xbe\xfb\x29\xa6\x4c\x8a\x95\x10\x9b\xb4\xbc\x49\x81\x55\x64\x5d\xda\x02\x3d\x14\x49\xd0\x6c\x91\x33\x2d\x8e\x25\xee\x52\x24\x4b\xd2\x91\x5d\x43\xef\x5e\x48\xb2\xbd\xb6\xec\x6e\x0c\x18\xe0\xcc\x47\xce\xcf\x37\x3f\xca\xaa\x50\xab\x7c\x92\x55\xc8\x45\x3e\x01\x00\xc8\x82\x0c\x0a\xf3\x6f\xb8\x7a\xe4\x52\x65\x6c\x10\x07\xc8\x17\x4e\xda\x00\xde\x15\x4b\x52\x85\x60\x7d\xca\x18\x7f\xe2\x5b\x5a\x1a\x53\x2a\xe4\x56\x7a\x5a\x98\xba\xd7\x31\x25\x57\x9e\x3d\xfd\xb3\x41\xb7\x63\xf7\x34\xa1\xc9\x41\xa0\xb5\xd4\xf4\xc9\x93\x3c\x63\x83\xbd\xa3\xf1\xb0\x53\x08\x61\x67\x71\x49\x02\x6e\x03\x2b\xbc\x27\x03\xd6\xfd\x56\x46\xec\x60\x7f\x12\x7b\x15\x2f\x9e\x4b\x67\x36\x5a\xcc\x0a\xa3\x8c\x4b\x61\xa5\x78\xf1\xfc\xf1\xe2\xd2\x01\x69\x2a\x19\xf0\x12\x59\x1b\x1d\x52\x48\xee\xed\x96\x25\xf4\x3d\xd4\x46\xf3\xc2\x4c\x81\xfc\x6a\x36\x4e\xa2\x83\x4f\xd8\x90\x29\x1c\xa4\x69\x87\x1b\x6f\x79\x31\xb2\x52\x73\x57\x4a\x9d\xc2\xdc\x6e\x2f\x01\xcb\x85\x90\xba\x4c\x21\x99\xdb\x2d\x2c\x2e\xf0\xf6\x74\xaa\x92\x1f\x26\xf5\x66\xb1\x58\xdc\xcc\xa9\x74\x88\x7a\x87\x4a\x99\xe6\x3a\xb3\x99\x97\xff\x62\x0a\x09\x5d\x60\x7d\x03\x6d\x50\x96\x55\x48\xe1\x97\xf9\x7c\x14\xb6\xf1\x32\x48\xa3\x53\x58\xcb\x2d\x8a\x4b\xb0\x91\x22\x54\x5d\x46\xf3\x9f\xff\x87\x85\x4b\x75\x30\xf6\x4a\xa7\x70\x1d\xae\x94\x27\xb2\x3e\xbc\xc2\xd5\x9b\x1a\xbd\xe7\x25\xfa\x11\x65\x47\xe7\xf7\x1d\xd1\xdd\x3f\x39\x1c\x5e\x2b\xc8\x15\x7c\x64\xfb\xe1\xe1\xe1\x75\xe7\x76\xe4\xbe\x6f\xad\x59\xdf\x1a\x29\x58\x87\xb3\xc6\x71\x3b\xe2\xcd\x38\xd1\xab\x53\x58\x39\xe4\xcf\xb3\x4e\x71\xdb\xbd\x10\x23\x40\x49\x8d\xb3\xea\x50\xae\xe4\xc3\x98\xf9\xf3\x5a\xbf\xbf\xe6\x2d\x63\xfd\x5c\xe5\x93\x8c\x0d\x33\x9e\x75\x83\xd4\x4d\x7c\x92\xef\xf7\xf4\x4f\x53\xb6\x6d\xc6\xaa\x24\x9f\x64\x42\x7e\x07\x29\x96\xe4\x98\x68\x37\xa1\x42\x7e\xcf\x27\xd9\xf9\x9c\xbe\x8d\x84\x29\x36\x35\xea\x10\x53\x87\x5c\xec\xa2\xf5\x46\x17\x5d\xc7\x40\x14\x9f\x31\x23\xd7\x10\x35\x52\x0b\xd3\xd0\x6f\xb8\xfa\x6a\x8a\x67\x0c\xf1\x98\x39\x0f\x4b\xd0\xd8\xc0\xe9\x46\x44\x9a\x6e\xa9\xec\xf7\xf4\x0f\xe3\x43\xdb\xb2\xb5\xe9\xda\x9b\xc4\x23\x3e\x3d\x35\xfa\x10\x27\x2c\xe1\x25\x02\x1c\xbb\x18\x42\x26\xa7\xea\x91\x98\x72\x6b\x51\x8b\x88\x64\x36\x27\xf0\x0e\x90\x0a\x1e\x38\xbc\x03\x92\x31\x9b\x8f\x3d\x0d\xa5\xd1\xde\x28\xa4\xca\x94\x11\x69\x70\xe5\xfb\x50\x53\x78\x79\x7d\xe3\xd1\xdb\xe8\xae\xdb\xad\xd3\x7e\x71\xdd\xc5\x94\x6b\x59\xf3\x80\xd1\xde\x17\xce\x28\xf5\xd8\x4d\xc6\x39\x97\x43\x85\xa3\xb8\x9d\xc2\xdd\x9a\xfb\x70\x37\xb2\xd9\x9e\x55\x16\x50\x79\x1c\x25\xca\x15\xba\x10\x91\x13\x93\xf0\xe9\xf3\x23\x7c\xfd\xfb\xcb\x97\xcf\x7f\x3d\xfe\xfe\xdb\x4f\xe7\x79\x0d\x9d\xd1\xc6\x1f\x27\x2f\x2b\x38\x63\x87\xbe\x60\xfd\x17\xe1\xbf\x00\x00\x00\xff\xff\xe0\x91\xcc\x18\x18\x06\x00\x00")

func dataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_dataIndexHtml,
		"data/index.html",
	)
}

func dataIndexHtml() (*asset, error) {
	bytes, err := dataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/index.html", size: 1560, mode: os.FileMode(438), modTime: time.Unix(1520402591, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/index.html": dataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{dataIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

